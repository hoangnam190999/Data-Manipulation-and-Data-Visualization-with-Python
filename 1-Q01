{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "911329a0-1640-4456-bd55-1f45229efb0f",
   "metadata": {},
   "source": [
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ced8816c-4632-4521-bed9-6799bfbdf307",
   "metadata": {
    "tags": []
   },
   "source": [
    "`inline code`"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d793f3c-652a-479a-9611-276411ff1420",
   "metadata": {},
   "source": [
    "```\n",
    "print abc\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da93c4aa-b81d-43cb-b350-0d8049905328",
   "metadata": {
    "tags": []
   },
   "source": [
    "```\n",
    "    print abc\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5279de3-19f6-4de5-bf0c-c2548290b466",
   "metadata": {},
   "source": [
    "#Bai1.1\n",
    "\n",
    "[1. Udemy.com](https://www.udemy.com/)\n",
    "\n",
    "[2. BigData University](https://cognitiveclass.ai/)\n",
    "\n",
    "[3. tuoitre.vn](https://tuoitre.vn/)\n",
    "\n",
    "[4. google.com](https://www.google.com/)\n",
    "\n",
    "[5. vnexpress.net](https://vnexpress.net/)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37233c35-3236-4aff-ade1-6f355754b1c4",
   "metadata": {},
   "source": [
    "#Bai1.2\n",
    "# **Thomas Alva Edison (February 11, 1847 – October 18, 1931)**\n",
    "\n",
    "![Thomas Edison](https://upload.wikimedia.org/wikipedia/commons/thumb/9/9d/Thomas_Edison2.jpg/1200px-Thomas_Edison2.jpg)\n",
    "\n",
    "[Visit Thomas Edison Wikipedia](https://en.wikipedia.org/wiki/Thomas_Edison)\n",
    "\n",
    "* Born: Thomas Alva Edison, February 11, 1847, Milan, Ohio, U.S.\n",
    "* Died: October 18, 1931 (aged 84), West Orange, New Jersey, U.S. \n",
    "* Burial place: Thomas Edison National Historical Park, Nationality American\n",
    "* Education: Self-educated\n",
    "* Occupation: Inventor, businessman"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "028f76d3-9665-4ab5-b73a-223b4564176d",
   "metadata": {},
   "source": [
    "## 1.3. Table\n",
    "\n",
    "|**STT**      | **Tên khóa học** | **Thời lượng** |\n",
    "| -----------: | :-----------:      | -----------: |\n",
    "|1 |Fundamentals of Python | 36|\n",
    "|2|Python for Machine Learning, Data Science & Data Visualization|36|\n",
    "|3|Maths & Statistic for Data Science|32|\n",
    "|4|Databases & SQL for Data Science|32|\n",
    "|5|Data Preprocessing & Analysis|40|\n",
    "|6|Machine Learning with Python|48|\n",
    "|7|R Programming Language for Data Science|48|\n",
    "|8|Big Data in Machine Learning|36|\n",
    "|9|Capstone Project|50|"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "169f4c81-334f-4b41-af0f-6958d0faf531",
   "metadata": {},
   "source": [
    "# $\\alpha$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "198faf89-2256-4503-bb32-85d24474dcf7",
   "metadata": {},
   "source": [
    "# $c^{k+1}_n$ "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c5492ca-8a4c-4c85-8faf-51af64b92a4e",
   "metadata": {
    "tags": []
   },
   "source": [
    "# $c^k_n$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f43b7e6-78c1-4af9-b1f0-a6b21cf7873c",
   "metadata": {},
   "source": [
    "# $\\frac{n!}{k!(n-k)!}$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99f08fec-bd54-442e-8e0a-26032db18d97",
   "metadata": {
    "tags": []
   },
   "source": [
    "# $\\frac{k}{(n-1)}$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1ab0e31",
   "metadata": {},
   "source": [
    "# $\\bar(x) = \\frac{sum_(i=1)^n ((x_i)-bar(x))^2}{n}$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c84c7c64",
   "metadata": {},
   "source": [
    "# 1.4\n",
    "\n",
    "# Linear Regression\n",
    "## $ a=\\frac{(\\sum y)(\\sum x^2)-(\\sum x)(\\sum xy)}{n(\\sum x^2)-(\\sum x)^2} $\n",
    "\n",
    "## $ b= \\frac{n(\\sum xy)-(\\sum x)(\\sum y)}{n(\\sum x^2)-(\\sum x)^2}$\n",
    "\n",
    "# Decision Tree\n",
    "* Entropy using the frequency table of one attribute:\n",
    "    ## $E(S)= \\sum ^c_{i=1} - p_ilog_2p_i$\n",
    "    \n",
    "* Entropy using the frequency table of two attributes:\n",
    "    ## $E(T,X)=\\sum_{c \\in x} P_(c)E(c)$\n",
    "\n",
    "* Gain\n",
    "    ## $Gain(T,X)=Entropy(T)-Entropy(E,X)$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9abcd812-226a-44ad-9a2b-0fcaf2b31c34",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'1.57, 1.65, 1.63, 1.58, 1.57, 1.68, 1.65, 1.70, 1.64, 1.67'"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "file_path = '/Users/hubert/Downloads/data.txt'\n",
    "with open(file_path, 'r') as file:\n",
    "    data = file.read()\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8a0cafc2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "0e48e984",
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "file not found.",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[16], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m arr\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mloadtxt(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mfile\u001b[39m\u001b[38;5;124m'\u001b[39m,delimiter\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m,\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m      2\u001b[0m arr\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/numpy/lib/npyio.py:1356\u001b[0m, in \u001b[0;36mloadtxt\u001b[0;34m(fname, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin, encoding, max_rows, quotechar, like)\u001b[0m\n\u001b[1;32m   1353\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(delimiter, \u001b[38;5;28mbytes\u001b[39m):\n\u001b[1;32m   1354\u001b[0m     delimiter \u001b[38;5;241m=\u001b[39m delimiter\u001b[38;5;241m.\u001b[39mdecode(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlatin1\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m-> 1356\u001b[0m arr \u001b[38;5;241m=\u001b[39m _read(fname, dtype\u001b[38;5;241m=\u001b[39mdtype, comment\u001b[38;5;241m=\u001b[39mcomment, delimiter\u001b[38;5;241m=\u001b[39mdelimiter,\n\u001b[1;32m   1357\u001b[0m             converters\u001b[38;5;241m=\u001b[39mconverters, skiplines\u001b[38;5;241m=\u001b[39mskiprows, usecols\u001b[38;5;241m=\u001b[39musecols,\n\u001b[1;32m   1358\u001b[0m             unpack\u001b[38;5;241m=\u001b[39munpack, ndmin\u001b[38;5;241m=\u001b[39mndmin, encoding\u001b[38;5;241m=\u001b[39mencoding,\n\u001b[1;32m   1359\u001b[0m             max_rows\u001b[38;5;241m=\u001b[39mmax_rows, quote\u001b[38;5;241m=\u001b[39mquotechar)\n\u001b[1;32m   1361\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m arr\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/numpy/lib/npyio.py:975\u001b[0m, in \u001b[0;36m_read\u001b[0;34m(fname, delimiter, comment, quote, imaginary_unit, usecols, skiplines, max_rows, converters, ndmin, unpack, dtype, encoding)\u001b[0m\n\u001b[1;32m    973\u001b[0m     fname \u001b[38;5;241m=\u001b[39m os\u001b[38;5;241m.\u001b[39mfspath(fname)\n\u001b[1;32m    974\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(fname, \u001b[38;5;28mstr\u001b[39m):\n\u001b[0;32m--> 975\u001b[0m     fh \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mlib\u001b[38;5;241m.\u001b[39m_datasource\u001b[38;5;241m.\u001b[39mopen(fname, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrt\u001b[39m\u001b[38;5;124m'\u001b[39m, encoding\u001b[38;5;241m=\u001b[39mencoding)\n\u001b[1;32m    976\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m encoding \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    977\u001b[0m         encoding \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mgetattr\u001b[39m(fh, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mencoding\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlatin1\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/numpy/lib/_datasource.py:193\u001b[0m, in \u001b[0;36mopen\u001b[0;34m(path, mode, destpath, encoding, newline)\u001b[0m\n\u001b[1;32m    156\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    157\u001b[0m \u001b[38;5;124;03mOpen `path` with `mode` and return the file object.\u001b[39;00m\n\u001b[1;32m    158\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    189\u001b[0m \n\u001b[1;32m    190\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    192\u001b[0m ds \u001b[38;5;241m=\u001b[39m DataSource(destpath)\n\u001b[0;32m--> 193\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m ds\u001b[38;5;241m.\u001b[39mopen(path, mode, encoding\u001b[38;5;241m=\u001b[39mencoding, newline\u001b[38;5;241m=\u001b[39mnewline)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/numpy/lib/_datasource.py:533\u001b[0m, in \u001b[0;36mDataSource.open\u001b[0;34m(self, path, mode, encoding, newline)\u001b[0m\n\u001b[1;32m    530\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m _file_openers[ext](found, mode\u001b[38;5;241m=\u001b[39mmode,\n\u001b[1;32m    531\u001b[0m                               encoding\u001b[38;5;241m=\u001b[39mencoding, newline\u001b[38;5;241m=\u001b[39mnewline)\n\u001b[1;32m    532\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 533\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mFileNotFoundError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mpath\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m not found.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: file not found."
     ]
    }
   ],
   "source": [
    "arr=np.loadtxt('file',delimiter=',')\n",
    "arr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8c0dd091",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
